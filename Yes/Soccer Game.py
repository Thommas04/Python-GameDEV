######################################################################################################################### KOP - 2022 / 2023 - FOCIS JÁTÉK# FÖLDES BENCE 'CINI' 4Kfrom ursina import *from ursina.raycaster import raycastfrom random import *app = Ursina()EditorCamera()character1 = 'graphics/karakterek/focista_arsenal.png'character2 = 'graphics/karakterek/focista_chelsea.png'character3 = 'graphics/karakterek/focista_fradi.png'#character4 = 'graphics/karakterek/focista_ujpest.png' okdevelopment_mode = Trueglobal_time = 0last_time = 0# ----------------------------------------------------------------------------------------------------------------------class Player(Entity):  # Class létrehozása, amit az Entity nevű classből örököltetünk. ( inheritance )    def __init__(self, x, y, cimke, vezerles, szin, **kwargs):  # alapértékek inicializálása        super().__init__(self, **kwargs)  # az Entity nevű classban lévő változók super __init__ általi elérése        self.cimke = cimke  # címke változó        self.vezerles = vezerles  # -||-        self.ugras_enablebyte = False        self.ugras = False        self.ugras_szabad = True        self.talajon_van = False        self.ugras_ok = False        self.x = x  # x pozíció        self.y = y  # y pozíció        self.model = 'cube'  # forma, a cube az alap ursinás cucc        self.color = szin        self.scale = (1, 2, 0)  # méret (x, y, z tengelyen)        self.world_position = (self.x, self.y, 0)        self.rotation = (0, 0, 0)  # forgás        # self.texture = texture        # jobb oldali ütközés ellenőrző szutyok        self.right_collision = Entity(model='plane', color=color.blue, rotation=(90, 0, 0), collider='box', parent=self,                                      visible=False,                                      scale=(0.1, 1, -1),                                      world_position=(self.x + 0.5, self.y, 0))        # bal        self.left_collision = Entity(model='plane', color=color.blue, rotation=(90, 0, 0), collider='box', parent=self,                                     visible=False,                                     scale=(0.1, 1, -1),                                     world_position=(self.x - 0.5, self.y, 0))        self.upper_collision = Entity(model='plane', color=color.violet, rotation=(90, 0, 0), collider='box',                                      parent=self, tag='talaj', visible=False,                                      scale=(1, 0, -0.1),                                      world_position=(self.x, self.y + 1, 0))        self.lower_collision = Entity(model='plane', color=color.violet, rotation=(90, 0, 0), collider='box',                                      parent=self, visible=False,                                      scale=(1, 0, -0.1),                                      world_position=(self.x, self.y - 1, 0))        self.collision_list = [self.right_collision, self.left_collision, self.lower_collision, self.upper_collision]    def update(self):        global global_time, last_time        global_time += time.dt        if self.ugras_enablebyte == True:            if global_time - last_time > 2:  # 2 másodpercenként                last_time = global_time                self.ugras_enablebyte = False            else:                self.position += self.up * 0.035        right_hit = self.right_collision.intersects(debug=True, ignore=self.collision_list)        left_hit = self.left_collision.intersects(debug=False, ignore=self.collision_list)        upper_hit = self.upper_collision.intersects(debug=False, ignore=self.collision_list)        lower_hit = self.lower_collision.intersects(debug=False, ignore=self.collision_list)        # -------------------------------------------------------------------------------------#        if self.vezerles == 'wasd':            if left_hit.hit == False:                self.x -= held_keys['a'] * time.dt * mozgas_sebesseg  # delta time - legutolsó képfrissítés óta eltelt idő (1-20ms)            if right_hit.hit == False:                self.x += held_keys['d'] * time.dt * mozgas_sebesseg        if self.vezerles == 'nyilak':            if left_hit.hit == False:                self.x -= held_keys['left arrow'] * time.dt * mozgas_sebesseg            if right_hit.hit == False:                self.x += held_keys['right arrow'] * time.dt * mozgas_sebesseg        # -------------------------------------------------------------------------------------#        # -------------------------------------------------------------------------------------#        # -------------------------------------------------------------------------------------#        if lower_hit.hit == False and self.ugras == False:  # zuhanás feltételei            self.position += self.down * 0.035        # -------------------------------------------------------------------------------------#        try:            if lower_hit.entity.tag == 'talaj':  # ha talajt ért ugorhasson mégegyszer                self.talajon_van = True            else:                self.talajon_van = False        except:            pass  # NoneType object has no attribute 'tag'        # -------------------------------------------------------------------------------------#        if self.ugras == True and upper_hit.hit == False:  # ugrás feltételei            self.position += self.up * 0.035    # []------------------------------------------------[]# objektumok létrehozása a Class szerintjatekos1 = Player(x=3, y=0, cimke='p1', vezerles='wasd', szin=color.red)jatekos2 = Player(x=1, y=0, cimke='p2', vezerles='nyilak', szin=color.yellow)jatekosok = [jatekos1,             jatekos2]  # listába rakom az objektumokat, hogy for ciklussal mindegyikre lehessen hivatkozni a loopban# []------------------------------------------------[]mozgas_sebesseg = 3# []------------------------------------------------[]def input(key):  # gombnyomáskor fut le. a key az a gomb, amit lenyomtál.    if key == 'space' and jatekos1.talajon_van == True:  # UGRÁS        jatekos1.ugras_enablebyte = True    '''if key == 'up arrow' and jatekos2.talajon_van == True:        jatekos2.ugras = True        jatekos2.talajon_van = False        invoke(jump_duration, jatekos2, delay=0.75)'''# []------------------------------------------------[]def update():  # Minden frame-ben lefut egyszer ( FPS )    pl_x1 = jatekos1.world_position.x;    pl_x2 = jatekos2.world_position.x    pl_y1 = jatekos1.world_position.y;    pl_y2 = jatekos2.world_position.y    if pl_x1 >= pl_x2:  # kamera legyen a két játékos közt.        camera_target.world_position = [((pl_x1 + pl_x2) / 2), ((pl_y1 + pl_y2) / 2), 0]    else:        camera_target.world_position = [((pl_x2 + pl_x1) / 2), ((pl_y2 + pl_y1) / 2), 0]    # -------------------------------------------------------------------------------------#    # -------------------------------------------------------------------------------------## [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]camera_target = Entity(model='cube', scale=(1, 1, 0), visible=False)camera.add_script(SmoothFollow(target=camera_target, offset=[0, 1, -50], speed=4))talajzat = Entity(model='cube', collider='box', scale=(15, 1, 0), color=color.green, x=0, y=-2, tag='talaj')app.run()