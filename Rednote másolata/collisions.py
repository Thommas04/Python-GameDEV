from ursina import *


def townlevel_collision():
    col_z = -0.1 # collision_z -> megadja a collision melyseget z tengelyen.

    collision_list= []
    building_collision_list = []

    tcds = [ [(6.0, 125.6),(13.5, 125.0)], # híd1
             [(6.0, 128.6),(13.4, 127.7)], # híd1
             [(17.9, 120.4),(39.0, 118.8)], # híd1 utáni partok
             [(39.0, 119.3),(45.5, 118.7)],
             [(45.6, 120.4),(53.9, 118.6)],
             [(17.9, 118.8), (18.4, 112.0)],
             [(18.6, 117.0), (57.6, 116.2)],
             [(0.0, 113.0), (18.4, 112.0)],
             [(56.0, 118.0), (57.0, 117.0)],
             [(55.0, 119.0), (56.0, 118.0)],
             [(53.9, 120.0), (55.0, 119.0)],
             [(0.0, 116.3), (18.0, 115.5)],
             [(51.5, 154.1), (58.1, 124.7)],
             [(53.1, 124.8), (58.1, 123.6)],
             [(58.0, 142.0), (59.0, 141.0)],
             [(59.0, 143.0), (60.0, 142.0)],
             [(60.0, 144.0), (61.0, 142.0)],
             [(61.0, 144.0), (62.0, 143.0)],
             [(62.0, 145.0), (63.0, 143.0)],
             [(63.0, 152.1), (64.1, 144.4)],
             [(64.0, 149.0), (72.6, 147.5)],
             [(72.5, 150.0), (74.4, 148.8)],
             [(74.4, 148.8), (74.4, 148.8)],
             [(74.4, 150.0), (85.2, 147.5)],
             [(84.3, 147.5), (86.0, 146.7)],
             [(85.1, 146.6), (87.0, 145.8)],
             [(86.0, 145.7), (99.0, 144.9)],
             [(99.0, 165.0), (100.0, 146.0)],
             [(92.8, 165.0), (99.0, 159.0)],
             [(69.0, 159.0), (94.0, 158.0)],
             [(70.0, 171.0), (71.2, 158.9)],

             [(107.7, 200.0), (135.1, 193.7)],
             [(135.1, 195.8), (153.6, 194.5)],
             [(153.6, 194.5), (155.4, 193.4)],
             [(154.6, 193.5), (158.5, 189.0)],
             [(158.5, 190.9), (162.7, 189.9)],
             [(162.0, 190.1), (169.4, 189.0)],
             [(168.1, 199.3), (169.4, 189.0)],
             [(169.4, 195.9), (179.7, 190.3)],
             [(179.6, 192.3), (184.2, 191.3)],
             [(182.8, 191.6), (188.5, 190.3)],
             [(187.3, 190.4), (195.4, 186.1)],
             [(195.4, 188.0), (199.0, 187.0)],
             [(199.0, 187.0), (200.0, 186.2)],
             [(139.3, 160.1), (141.5, 158.8)],
             [(139.4, 158.9), (140.5, 151.6)],
             [(140.5, 152.0), (142.7, 151.0)],
             [(141.7, 151.0), (142.8, 147.7)],
             [(142.8, 148.5), (151.7, 147.7)],
             [(151.6, 149.7), (155.8, 148.8)],
             [(155.0, 148.8), (162.7, 147.8)],
             [(162.1, 158.8), (162.7, 147.8)],
             [(162.8, 155.3), (164.6, 154.4)],
             [(164.5, 156.0), (165.3, 155.0)],
             [(165.4, 156.7), (166.2, 155.5)],
             [(166.2, 157.3), (168.0, 156.0)],
             [(167.2, 179.8), (168.0, 156.0)],
             [(167.2, 179.8), (171.9, 175.6)],
             [(171.0, 190.8), (171.9, 175.6)],
             [(140.5, 156.1), (141.6, 155.1)],
             [(141.6, 155.5), (142.7, 152.0)],
             [(142.7, 152.2), (150.6, 151.4)],
             [(150.5, 152.8), (156.1, 151.3)],
             [(156.2, 152.0), (162.2, 151.1)],
             [(162.1, 159.1), (164.1, 158.1)],
             [(164.0, 159.6), (165.7, 158.7)],
             [(165.4, 160.3), (167.5, 159.1)],

             ]

    buildings = [[(27.8,105.2),(32.6,102.7)],
                 [(27.3, 103.1), (29.0, 102.0)],
                 [(31.2, 102.0), (32.4, 102.8)], # sátor

                 [(87.4, 184.6), (72.7, 179.4)], #templom
                 [(76.1, 179.6), (79.3, 177.6)],
                 [(80.8, 180.0), (84.0, 178.1)],
                 [(80.8, 180.0), (81.8, 177.4)],

                 ]


    for building_points in buildings:
        building_collision_list.append(Entity(model='quad', collider='box', tag = 'building_collision', origin = (-0.5,0.5), position=(building_points[0][0], building_points[0][1], col_z), scale=(building_points[1][0]-building_points[0][0], building_points[0][1]-building_points[1][1], 0.5), color=color.pink))


    for points in tcds:
        collision_list.append(Entity(model='quad', collider='box', tag = 'terrain_collision', origin = (-0.5,0.5), position=(points[0][0], points[0][1], col_z), scale=(points[1][0]-points[0][0], points[0][1]-points[1][1], 0.5), color=color.azure))

    for i in collision_list:
        i.alpha = 0
    for i in building_collision_list:
        i.alpha = 0

    return collision_list